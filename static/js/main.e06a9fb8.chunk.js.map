{"version":3,"sources":["../public/img/logo.svg","components/Code/index.js","pages/index/components/Section.js","pages/index/snippets/hooks.js","pages/index/snippets/store.js","pages/index/snippets/provider.js","pages/index/snippets/combineReducers.js","pages/index/snippets/reduxThunk.js","pages/index/snippets/reducer.js","pages/index/snippets/actionCreator.js","pages/index/snippets/connect.js","pages/index/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Code","props","react_default","a","createElement","className","data-line","highlighted","concat","language","snippet","Heading","styled","h3","withConfig","displayName","componentId","Section","useEffect","Prism","highlightAll","heading","Code_Code","hooks","store","provider","combineReducers","reduxThunk","reducer","actionCreator","connect","Title","h1","Logo","img","Container","div","CodeSection","Index","src","logo","alt","actionCreatorSnippet","thunkSnippet","reducerSnippet","combineReducersSnippet","storeSnippet","providerSnippet","connectSnippet","hooksSnippet","Boolean","window","location","hostname","match","App","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4LCE3BC,6CAAO,SAACC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMI,UAAWC,YAAWL,EAAMM,aAAe,IAC/DL,EAAAC,EAAAC,cAAA,QAAMC,UAAS,YAAAG,OAAcP,EAAMQ,WAChCR,EAAMS,YCDTC,EAAUC,IAAOC,GAAVC,WAAA,CAAAC,YAAA,mBAAAC,YAAA,gBAAGJ,CAAH,oCAsBN,IAAMK,EAAUL,YAjBvB,SAA8BX,GAM5B,OAJAiB,oBAAU,WACRC,IAAMC,gBACL,CAACnB,EAAMS,UAGRR,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMI,WACpBH,EAAAC,EAAAC,cAACO,EAAD,KAAUV,EAAMoB,SAChBnB,EAAAC,EAAAC,cAACkB,EAAD,CACEb,SAAUR,EAAMQ,SAChBC,QAAST,EAAMS,aAMHI,WAAA,CAAAC,YAAA,UAAAC,YAAA,gBAAGJ,CAAH,+CC3BNW,EAAA,4lCCAAC,EAAA,qhBCAAC,EAAA,kMCAAC,EAAA,0OCAAC,EAAA,klBCAAC,EAAA,obCAAC,EAAA,kICAAC,EAAA,+QCcRC,EAAQnB,IAAOoB,GAAVlB,WAAA,CAAAC,YAAA,eAAAC,YAAA,YAAGJ,CAAH,0GASLqB,EAAOrB,IAAOsB,IAAVpB,WAAA,CAAAC,YAAA,cAAAC,YAAA,YAAGJ,CAAH,+CAOJuB,EAAYvB,IAAOwB,IAAVtB,WAAA,CAAAC,YAAA,mBAAAC,YAAA,YAAGJ,CAAH,sDAMTyB,EAAczB,IAAOwB,IAAVtB,WAAA,CAAAC,YAAA,qBAAAC,YAAA,YAAGJ,CAAH,gEAMF,SAAS0B,EAAMrC,GAC5B,OACEC,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAAC6B,EAAD,CAAMM,IAAKC,IAAMC,IAAI,eADvB,oBAIAvC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,kBACRZ,SAAS,MACTC,QAASgC,IAEXxC,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,QACRZ,SAAS,MACTC,QAASiC,IAEXzC,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,WACRZ,SAAS,MACTC,QAASkC,IAEX1C,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,mBACRZ,SAAS,MACTC,QAASmC,IAEX3C,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,QACRZ,SAAS,MACTC,QAASoC,IAEX5C,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,WACRZ,SAAS,MACTC,QAASqC,IAEX7C,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,sBACRZ,SAAS,MACTC,QAASsC,IAEX9C,EAAAC,EAAAC,cAACa,EAAD,CACEI,QAAQ,QACRZ,SAAS,MACTC,QAASuC,MC5ECC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,SAASC,IACP,OACErD,EAAAC,EAAAC,cAACkC,EAAD,MAIJ,IAAMkB,EAAcC,SAASC,eAAe,QACxCF,EAAYG,gBACdC,kBAAQ1D,EAAAC,EAAAC,cAACmD,EAAD,MAASC,GAEjBK,iBAAO3D,EAAAC,EAAAC,cAACmD,EAAD,MAASC,GDiHZ,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e06a9fb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4e231cdc.svg\";","import React from 'react';\r\n\r\nexport const Code = (props) => {\r\n  return (\r\n    <pre className={props.className} data-line={props.highlighted || ''}>\r\n      <code className={`language-${props.language}`}>\r\n        {props.snippet}\r\n      </code>\r\n    </pre>\r\n  )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Prism from 'prismjs'\r\nimport { Code } from 'src/components/Code';\r\n\r\nconst Heading = styled.h3`\r\n  color: #764ABC;\r\n  font-size: 1.4em;\r\n`\r\n\r\nfunction CodeSectionContainer(props) {\r\n  \r\n  useEffect(() => {\r\n    Prism.highlightAll();\r\n  }, [props.snippet])\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <Heading>{props.heading}</Heading>\r\n      <Code \r\n        language={props.language}\r\n        snippet={props.snippet} \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Section = styled(CodeSectionContainer)`\r\n  margin: 20px;\r\n  flex-grow: 1;\r\n`","export default\r\n`\\\r\nimport React from 'react';\r\nimport { useSelector, useDispatch, useStore } from 'react-redux';\r\nimport { addTodos } from 'src/actions';\r\n\r\nexport const TodosComponent = () => {\r\n  // useSelector: Selects a 'piece' of the state for use in this component.\r\n  // Note that state.todos returns an object with the todos array inside it\r\n  // due to the way the state was defined, hence the need to drill down another level.\r\n  const todos = useSelector(state => state.todos.todos)\r\n  const dispatch = useDispatch();\r\n\r\n  // It is recommended to memoize when passing a callback using dispatch to a child component.\r\n  const addTodo = useCallback(\r\n    () => dispatch(addTodos('Hardcoded task')),\r\n    [dispatch]\r\n  )\r\n\r\n  // This gets the actual store.\r\n  const store = useStore();\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        todos.map((todo, index) => {\r\n          return (\r\n            <li key={index}>{ todo }</li>\r\n          )\r\n        })\r\n      }\r\n      <MyTodoButton onAdd={addTodo} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const MyTodoButton = React.memo(({ onAdd }) => (\r\n  <button onClick={onAdd}>Add Task</button>\r\n))\r\n`","export default \r\n`\\\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport getReducers from 'src/reducers';\r\n\r\nconst composeEnhancers =\r\n  (process.env.NODE_ENV !== 'production' &&\r\n    typeof window !== 'undefined' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n  compose;\r\n\r\nexport const initStore = (initialState) => {\r\n  let store = createStore(\r\n    getReducers(),\r\n    initialState || {},\r\n    composeEnhancers(applyMiddleware(thunkMiddleware))\r\n  );\r\n\r\n  return store;\r\n}\r\n`","export default \r\n`\\\r\nimport { initStore } from './store';\r\n\r\nconst store = initStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      {/*...rest of app here*/}\r\n    </Provider>\r\n\r\n  );\r\n}\r\n`","export default\r\n`\\\r\nimport { combineReducers } from 'redux';\r\nimport todos from './todos';\r\n\r\n// Creates what is called the 'root reducer'\r\nconst getReducers = () => {\r\n  return combineReducers({\r\n    todos,\r\n  });\r\n};\r\n\r\nexport default getReducers;\r\n`","export default \r\n`\\\r\n// Synchronous load\r\nexport const loadTodos = (todos) => {\r\n  return {\r\n    type: 'LOAD_TODOS',\r\n    todos\r\n  }\r\n}\r\n\r\n// Asynchronous load from API using Redux Thunk\r\nexport const loadTodosAsync = (link) => {\r\n  return async function (dispatch) {\r\n    let res = null, data = null;\r\n    try {\r\n      res = await fetch(link).then(res => {\r\n        if (!res.ok) throw Error(res.statusText);\r\n        return res;\r\n      });\r\n      data = await res.json();\r\n      dispatch(loadTodos(data));\r\n    } catch(e) {\r\n      dispatch(loadTodos([]);\r\n      console.error(e);\r\n      return;\r\n    }\r\n  }\r\n}\r\n`","export default\r\n`\\\r\nconst initialState = {\r\n  todos: [],\r\n};\r\n\r\nfunction todosReducer(state=initialState, action) {\r\n  switch (action.type) {\r\n    case 'ADD_TODOS':\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.todos]\r\n      }\r\n    case 'LOAD_TODOS':\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.todos]\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const todos = todosReducer;\r\n`","export default \r\n`\\\r\nexport const addTodos = (todos) => {\r\n  return {\r\n    type: 'ADD_TODOS', // The action type\r\n    todos // The payload\r\n  }\r\n}\r\n`","export default\r\n`\\\r\nimport { connect } from 'react-redux';\r\nimport { addTodos } from 'src/actions/todo';\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    todos: state.todos,\r\n  }), {\r\n    // Shorthand syntax, will wrap addTodos with dispatch.\r\n    addTodos,\r\n  }\r\n)(TodosListContainer);\r\n`","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Section }  from './components/Section'\r\nimport logo from 'public/img/logo.svg'\r\n\r\nimport hooksSnippet from './snippets/hooks';\r\nimport storeSnippet from './snippets/store';\r\nimport providerSnippet from './snippets/provider';\r\nimport combineReducersSnippet from './snippets/combineReducers';\r\nimport thunkSnippet from './snippets/reduxThunk';\r\nimport reducerSnippet from './snippets/reducer';\r\nimport actionCreatorSnippet from './snippets/actionCreator';\r\nimport connectSnippet from './snippets/connect';\r\n\r\nconst Title = styled.h1`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 75px auto;\r\n  color: #764ABC;\r\n  font-size: 3em;\r\n`\r\n\r\nconst Logo = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 10px;\r\n`\r\n\r\n\r\nconst Container = styled.div`\r\n  max-width: 1000px;\r\n  min-height: 100vh;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst CodeSection = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nexport default function Index(props) {\r\n  return (\r\n    <Container>\r\n      <Title>\r\n        <Logo src={logo} alt=\"Redux logo\"></Logo>\r\n        Redux Cheatsheet\r\n      </Title>\r\n      <CodeSection>\r\n        <Section \r\n          heading='Action Creators'\r\n          language='jsx' \r\n          snippet={actionCreatorSnippet} \r\n        />\r\n        <Section\r\n          heading='Thunk'\r\n          language='jsx'\r\n          snippet={thunkSnippet} \r\n        />\r\n        <Section\r\n          heading='Reducers'\r\n          language='jsx'\r\n          snippet={reducerSnippet} \r\n        />\r\n        <Section\r\n          heading='Combine Reducers'\r\n          language='jsx'\r\n          snippet={combineReducersSnippet} \r\n        />\r\n        <Section\r\n          heading='Store'\r\n          language='jsx'\r\n          snippet={storeSnippet} \r\n        />\r\n        <Section\r\n          heading='Provider'\r\n          language='jsx'\r\n          snippet={providerSnippet} \r\n        />\r\n        <Section\r\n          heading='React-Redux Connect'\r\n          language='jsx'\r\n          snippet={connectSnippet} \r\n        />\r\n        <Section\r\n          heading='Hooks'\r\n          language='jsx'\r\n          snippet={hooksSnippet} \r\n        />\r\n      </CodeSection>\r\n    </Container>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.css';\nimport Index from './pages/index';\nimport * as serviceWorker from './serviceWorker';\n\nfunction App() {\n  return (\n    <Index />\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}